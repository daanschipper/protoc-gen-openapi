syntax = "proto3";

package merge_examples_foobar;

import "gnostic/openapi/v3/annotations.proto";

// Description for Foo
service Foo {
  rpc FooBar(BarRequest) returns (BarReply) {
    option (gnostic.openapi.v3.operation) = {
      description: "Description for FooBar"
      request_body: {
        request_body: {
          content: {
            additional_properties: {
              name: "application/json"
              value: {
                examples: {
                  additional_properties: {
                    name: "test yaml"
                    value: {
                      example: {
                        summary: "example test yaml"
                        value: {
                          yaml: "test"
                        }
                      }
                    }
                  }
                  additional_properties: {
                    name: "test yaml multiline"
                    value: {
                      example: {
                        summary: "example test yaml multiline"
                        value: {
                          yaml: "test:\n"
                          "  foo: bar"
                        }
                      }
                    }
                  }
                  additional_properties: {
                    name: "test value",
                    value: {
                      example: {
                        summary: "example test value",
                        value: {
                          value: {
                            type_url: "merge_examples_foobar/BarRequest"
                            value: "{\"name\":{\"name\":\"example-name\"}}"
                          }
                        }
                      }
                    }
                  }
                  additional_properties: {
                    name: "test invalid value",
                    value: {
                      example: {
                        summary: "example test invalid value",
                        value: {
                          value: {
                            type_url: "merge_examples_foobar/BarRequest"
                            value: "{\"name\":{\"nameinvalidfield\":\"example-name\"}}"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      responses: {
        response_or_reference: {
          name: "200"
          value: {
            response: {
              content: {
                additional_properties: {
                  name: "application/json"
                  value: {
                    examples: {
                      additional_properties: {
                        name: "test"
                        value: {
                          example: {
                            summary: "example test bar"
                            value: {
                              yaml: "test"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
  }
}

// The request message containing the user's name.
message BarRequest {
  option (gnostic.openapi.v3.schema) = {
    title: "Title for BarRequest"
    description: "Description for BarRequest"
  };

  Name name = 1 [
    (gnostic.openapi.v3.property) = {
      title: "Title for BarRequest"
      description: "Description for BarRequest.name"
    }
  ];
}

// The response message containing the greetings
message BarReply {
  option (gnostic.openapi.v3.schema) = {
    title: "Title for BarRequest"
    description: "Description for BarRequest";
  };
  string message = 1[
    (gnostic.openapi.v3.property) = {
      title: "Title for BarReply.message"
      description: "Description for BarReply.message"
    }
  ];
}

message Name {
  option (gnostic.openapi.v3.schema) = {
    title: "Title for Name"
    description: "Description for Name"
  };
  string name = 1[
    (gnostic.openapi.v3.property) = {
      title: "Title for Name.name"
      description: "Description for Name.name";
    }
  ];
}
